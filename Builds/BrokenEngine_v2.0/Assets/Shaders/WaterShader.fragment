#version 440 core 
in vec3 ourColor; 
in vec2 TexCoord; 
in vec3 fPosition;
in vec3 fNormal;
in vec3 medium_pos;
out vec4 color; 
uniform sampler2D ourTexture; 

uniform int amplitude;
uniform vec3 lightDirection;
uniform float lightIntensity;

vec2 blinnPhongDir(vec3 lightDir, float lightInt, float Ka, float Kd, float Ks, float shininess)
{
vec3 s = normalize(lightDir);
vec3 v = normalize(-fPosition);
vec3 n = normalize(fNormal);
vec3 h = normalize(v+s);
float diffuse = Ka + Kd * lightInt * max(0.0, dot(n, s));
float spec = Ks * pow(max(0.0, dot(n,h)), shininess);
return vec2(diffuse, spec);
}
void main()
{
vec3 albedo = vec3(texture(ourTexture, TexCoord));

float Top = medium_pos.y + amplitude*4;
float Bottom = medium_pos.y;
vec4 white = vec4(1.0,1.0,1.0,0.0);
vec4 blue = vec4(0.0,0.0,1.0,1.0);

float mixpercentage = 0.0;
float range = Top - Bottom;

if (range > 0)
mixpercentage = (fPosition.y - Bottom) / range*1.25;

vec4 finalcolor = mix(blue, white, mixpercentage);
albedo = vec3(mix(finalcolor, vec4(albedo, 1.0), 0.5));

vec2 inten = blinnPhongDir(lightDirection, lightIntensity, 2.0, 0.5, 0.0,0.5);
color = vec4((albedo * inten.x + vec3(1.0) * inten.y ), 1.0);
}













